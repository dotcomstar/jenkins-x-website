<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jenkins X - Cloud Native CI/CD Built On Kubernetes â€“ Upgrades</title>
    <link>https://jenkins-x.io/v3/admin/setup/upgrades/</link>
    <description>Recent content in Upgrades on Jenkins X - Cloud Native CI/CD Built On Kubernetes</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://jenkins-x.io/v3/admin/setup/upgrades/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>V3: CLI</title>
      <link>https://jenkins-x.io/v3/admin/setup/upgrades/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/upgrades/cli/</guid>
      <description>
        
        
        &lt;h2 id=&#34;cli&#34;&gt;CLI&lt;/h2&gt;
&lt;p&gt;To upgrade the jx CLI run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx upgrade cli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To upgrade jx subcommand plugins run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx upgrade plugins
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;


    &lt;p&gt;If you encounter this error:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ERROR: failed to load plugin &amp;lt;plugin-name&amp;gt;: can&amp;#39;t find latest version of plugin: {&amp;#34;message&amp;#34;:&amp;#34;Not Found&amp;#34;,&amp;#34;documentation_url&amp;#34;:&amp;#34;https://docs.github.com/rest/reference/repos#get-the-latest-release&amp;#34;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then most probably it&amp;rsquo;s an old plugin which is not maintained, and can be removed from &lt;code&gt;~/.jx3/plugins/bin&lt;/code&gt; folder.&lt;/p&gt;


&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;jx&lt;/code&gt; CLI version used to upgrade to is derived from the Jenkins X &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have not installed Jenkins X or are not connected to a Kubernetes cluster with Jenkins X running then the &lt;code&gt;jx&lt;/code&gt; CLI version defaults to the latest version stream git repository &lt;a href=&#34;https://github.com/jenkins-x/jxr-versions/blob/master/packages/jx.yml&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you are running the &lt;code&gt;jx upgrade cli&lt;/code&gt; command from within a cloned cluster git repository (one that has the helmfile.yaml and jx-requirements.yml files at the root folder) then the &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; URL used to find the correct jx CLI version use comes from the local file &lt;code&gt;versionStream/Kptfile&lt;/code&gt;.  The reason for this is when switching &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; you need to match the jx CLI version stored in that desired vesrion stream, as they may be different to you previous &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to find the &lt;code&gt;jx&lt;/code&gt; CLI version that matches the &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; used by your cluster git repository then pass this addional flag:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx upgrade cli --from-environment
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>V3: Cluster</title>
      <link>https://jenkins-x.io/v3/admin/setup/upgrades/cluster/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/upgrades/cluster/</guid>
      <description>
        
        
        &lt;h2 id=&#34;cluster&#34;&gt;Cluster&lt;/h2&gt;
&lt;h3 id=&#34;automatic-upgrades&#34;&gt;Automatic upgrades&lt;/h3&gt;
&lt;p&gt;To enable automatic upgrades of your cluster you need to modify your &lt;code&gt;jx-requirements.yml&lt;/code&gt; file in your development git cluster repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;apiVersion&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;core.jenkins-x.io/v4beta1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;kind&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;Requirements&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;spec&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;autoUpdate&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;enabled&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;schedule&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;0 0 * * *&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;autoMerge&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you commit and push that change and your &lt;a href=&#34;https://jenkins-x.io/v3/about/how-it-works/#boot-job&#34;&gt;boot job has completed&lt;/a&gt; you should have a &lt;code&gt;CronJob&lt;/code&gt; running at the above schedule (every night at midnight) creating a Pull Request to upgrade your cluster&amp;rsquo;s versions of charts and images.&lt;/p&gt;
&lt;p&gt;If you set &lt;code&gt;autoMerge: true&lt;/code&gt; then the upgrade Pull Requests will get auto merged if the CI/CD pipelines all succeed; otherwise you need to manually approve the Pull Requests when you are happy for the upgrade to be applied.&lt;/p&gt;
&lt;p&gt;For more help on the Cron scheduler syntax check out &lt;a href=&#34;https://crontab.guru/&#34;&gt;crontab.guru&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;manual-upgrades&#34;&gt;Manual upgrades&lt;/h3&gt;
&lt;p&gt;The following demo walks through how to manually upgrade your cluster:&lt;/p&gt;
&lt;iframe width=&#34;700&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/9ZaqdwD3cTs&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;h3 id=&#34;prerequisite&#34;&gt;prerequisite&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;make sure you have upgraded your &lt;a href=&#34;https://jenkins-x.io/v3/guides/upgrades/cli&#34;&gt;jx CLI&lt;/a&gt; to make sure you are using the correct version for the next steps.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;You can upgrade your Jenkins X installation at any time by running the &lt;a href=&#34;https://jenkins-x.io/v3/develop/reference/jx/gitops/upgrade&#34;&gt;jx gitops upgrade&lt;/a&gt; command inside a git checkout of your cluster GitOps repository:&lt;/p&gt;
&lt;p&gt;First make sure you have the latest git contents as the &lt;a href=&#34;https://jenkins-x.io/v3/about/how-it-works/#boot-job&#34;&gt;boot job will push changes&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git pull
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Make sure you have no pending git commits&amp;hellip;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git status
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if your git clone is clean run the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gitops upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;upgrade your local &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version stream&lt;/a&gt; to the latest which has passed the latest tests&lt;/li&gt;
&lt;li&gt;make any changes in the version stream to the &lt;a href=&#34;https://jenkins-x.io/v3/about/how-it-works/#boot-job&#34;&gt;boot job and its configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After running this command you will usually have some changes in git you can review. If you are happy with the changes commit them and create a Pull Request so that they can get applied on your cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git add *
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git commit -a -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fix: upgrade versions&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git push
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The jx-git-operator will trigger a boot job in the &lt;code&gt;jx-git-operator&lt;/code&gt; namespace, to track the progress of the upgrade you can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx admin logs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;merge-conflicts&#34;&gt;Merge conflicts&lt;/h3&gt;
&lt;p&gt;It is possible that you will have merge conflicts.  You can follow the inline git helper messages to resolve conflicts - or use your IDE to help figure out the merge issues. Usually if there are conflicts its safest to use the upstream version; particularly from the &lt;code&gt;versionStream&lt;/code&gt; dir.&lt;/p&gt;
&lt;p&gt;Under the hood Kpt is used to fetch changes from the upstream defined in each Kptfile.&lt;br&gt;
By default the &lt;code&gt;versionStream&lt;/code&gt; directory has a Kpt strategy of &lt;code&gt;force-delete-replace&lt;/code&gt; which removes all your changes in that folder. In order to merge your changes with the ones coming from upstream, add a file: &lt;code&gt;.jx/gitops/kpt-strategy.yaml&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  - &lt;span style=&#34;color:#f92672&#34;&gt;relativePath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;versionStream&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;strategy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;resource-merge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once ready, make a pull request onto your cluster repository, review changes and merge.  The &lt;a href=&#34;https://github.com/jenkins-x/jx-git-operator&#34;&gt;Jenkins X git operator&lt;/a&gt; will automatically apply the upgrades into your cluster.&lt;/p&gt;
&lt;h3 id=&#34;replacing-your-local-versionstream&#34;&gt;Replacing your local versionStream&lt;/h3&gt;
&lt;p&gt;If you are having merge conflicts trying to upgrade your installation you could just replace the &lt;code&gt;versionStream&lt;/code&gt;  directory with the latest version stream folder. &lt;strong&gt;NOTE&lt;/strong&gt; this will overwrite any local changes you have made inside the &lt;code&gt;verisonStream&lt;/code&gt; folder. Though everything is versioned in git so you can always review the changes.&lt;/p&gt;
&lt;p&gt;Inside your cluster git repository run this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kpt pkg update --strategy force-delete-replace versionStream
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That will update your &lt;code&gt;versionStream&lt;/code&gt; directory to be in line with the latest version stream. You can always then review the changes before committing them.&lt;/p&gt;
&lt;h3 id=&#34;configure-merge-strategy&#34;&gt;Configure merge strategy&lt;/h3&gt;
&lt;p&gt;You can configure the &lt;code&gt;kpt&lt;/code&gt; strategy used to apply changes from the version stream into your &lt;code&gt;versionStream&lt;/code&gt; folder via a custom configuration file.&lt;/p&gt;
&lt;p&gt;Create a file called &lt;code&gt;.jx/gitops/kpt-strategy.yaml&lt;/code&gt; in your dev cluster git repository that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;config&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;relativePath&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;versionStream&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;strategy&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;alpha-git-patch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;this will configure that the &lt;code&gt;alpha-git-patch&lt;/code&gt; strategy will be used whenever you try &lt;code&gt;jx gitops upgrade&lt;/code&gt; which should preserve any local changes; though you may have to resolve some git conflicts in your IDE (as described above).&lt;/p&gt;
&lt;p&gt;To avoid any possible git merge issues its a good idea to try keep local source changes out of the &lt;code&gt;versionStream&lt;/code&gt; folder if you can.&lt;/p&gt;
&lt;h3 id=&#34;locking-versions&#34;&gt;Locking versions&lt;/h3&gt;
&lt;p&gt;To prevent manual changes from being overwritten during an upgrade,
add the &lt;code&gt;version.jenkins-x.io: lock&lt;/code&gt; label to a chart in your &lt;em&gt;helmfile.yaml&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;- &lt;span style=&#34;color:#f92672&#34;&gt;chart&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;ingress-nginx/ingress-nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;version&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3.12.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;nginx-ingress&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;values&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;../../versionStream/charts/ingress-nginx/ingress-nginx/values.yaml.gotmpl&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - &lt;span style=&#34;color:#ae81ff&#34;&gt;jx-values.yaml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;labels&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;version.jenkins-x.io&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;lock&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>V3: Infrastructure</title>
      <link>https://jenkins-x.io/v3/admin/setup/upgrades/infrastructure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/upgrades/infrastructure/</guid>
      <description>
        
        
        &lt;h2 id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h2&gt;
&lt;p&gt;If you have used one of the Jenkins X Terraform Git repositories to create and manage your cloud resources then you have two options.&lt;/p&gt;
&lt;h3 id=&#34;terraform-manual-apply&#34;&gt;Terraform manual apply&lt;/h3&gt;
&lt;p&gt;If you are running the Terraform apply commands yourself then from your infrastructure Git repository run:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export TF_VAR_jx_bot_username=[your bot username]
export TF_VAR_jx_bot_token=[your bot token]
terraform get -update
terraform plan
terraform apply
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;terraform-cloud&#34;&gt;Terraform Cloud&lt;/h3&gt;
&lt;p&gt;If you are using &lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform Cloud&lt;/a&gt; then from your infrastructure Git repository run:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;terraform get -update
git commit -a -m &amp;#39;chore: upgrade cloud infra&amp;#39;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Terraform Cloud should trigger automatically and apply the updates, view the log in Terraform Cloud.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V3: LTS</title>
      <link>https://jenkins-x.io/v3/admin/setup/upgrades/lts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/upgrades/lts/</guid>
      <description>
        
        
        &lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
  &lt;h1&gt;WARNING: The LTS is not updated, so we don&#39;t recommend using it&lt;/h1&gt;
&lt;/div&gt;
&lt;p&gt;Jenkins X uses &lt;a href=&#34;https://jenkins-x.io/about/concepts/version-stream/&#34;&gt;version streams&lt;/a&gt; as a quality gate when promoting plugins, charts, cli packages, container images etc.  This results in a release of Jenkins X.&lt;/p&gt;
&lt;p&gt;The default version stream for Jenkins X 3.x is &lt;a href=&#34;https://github.com/jenkins-x/jx3-versions&#34;&gt;https://github.com/jenkins-x/jx3-versions&lt;/a&gt;.  The Jenkins X own infrastructure runs a number of end to end BDD tests for different base install options which covers the core of Jenkins X.  Provided these tests pass on from a Pull Request it will be merged and users can upgrade their &lt;a href=&#34;https://jenkins-x.io/v3/guides/upgrades/cli&#34;&gt;CLI&lt;/a&gt; and &lt;a href=&#34;https://jenkins-x.io/v3/guides/upgrades/cluster&#34;&gt;Cluster&lt;/a&gt; bringing in the versions that make that release.&lt;/p&gt;
&lt;p&gt;As Jenkins X uses Continuous Delivery all the way through the stack it means there can be a lot of releases, even many on a daily basis.  While we are advocates of Continuous Delivery it can be hard for users to consume the number of releases so often.  For teams that are in need of more mature features when they are released it can also bring some risk upgrading from the latest daily release of an open source project.&lt;/p&gt;
&lt;p&gt;The Long Term Support (LTS) version stream (&lt;a href=&#34;https://github.com/jenkins-x/jx3-lts-versions/&#34;&gt;https://github.com/jenkins-x/jx3-lts-versions/&lt;/a&gt;) is designed to help with these two scenarios.  It is a replica of the latest default version stream described above but will release on a slower cadence.  This means users can switch their installations to track the LTS version stream and bring in changes when it suits them.  They will see a collection of changes which will have improved documentation and maturity given the feedback from users tracking the latest version stream.  Jenkins X own infrastructure uses the latest version stream and automatically upgrades on every release, this is another way we can build confidence in the quality of an LTS release.&lt;/p&gt;
&lt;h2 id=&#34;lts&#34;&gt;LTS&lt;/h2&gt;
&lt;p&gt;To switch your installation clone your cluster git repository&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gitops versionstream --lts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will modify and commit a change to your local &lt;code&gt;./versionStream/Kptfile&lt;/code&gt;, it will now point at the LTS version stream.&lt;/p&gt;
&lt;p&gt;Next we need to make sure your local &lt;code&gt;jx&lt;/code&gt; CLI is aligned with the version in the LTS version stream.&lt;/p&gt;
&lt;p&gt;From within the same directory as above run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx upgrade cli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next we will get the LTS version stream and align the &lt;code&gt;helmfile.yaml&lt;/code&gt; with the correct versions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gitops upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now review changes, commit and push to your cluster remote git repository.&lt;/p&gt;
&lt;h2 id=&#34;latest&#34;&gt;Latest&lt;/h2&gt;
&lt;p&gt;To switch back to the latest version stream repeat the steps above with the &lt;code&gt;--latest&lt;/code&gt; flag instead.
e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gitops versionstream --latest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx upgrade cli
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gitops upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;custom&#34;&gt;Custom&lt;/h2&gt;
&lt;p&gt;The monthly cadence of the LTS version stream may still be too frequent if you desire.  For this you can fork the LTS version stream, point your installation at the fork and manage syncing your fork with the LTS at whatever cadence suits you best.&lt;/p&gt;
&lt;p&gt;To use a custom fork repeat the steps above with the &lt;code&gt;--custom&lt;/code&gt; flag and git details instead.
e.g.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gitops versionstream --custom --url https://github.com/foo/bar --ref master --directory versionStream
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx upgrade cli
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;jx gitops upgrade
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If it helps &lt;a href=&#34;https://github.com/jenkins-x/jx3-versions/blob/a82a00258e293d7457d6da15d7037363cfd3841d/.lighthouse/jenkins-x/release/promote-vs.sh#L53-L58&#34;&gt;this&lt;/a&gt; is where we automatically create a pull request on the LTS version stream when we release the latest version stream.  You can do the same when updating your custom fork.&lt;/p&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/foo/bar.git
cd &amp;#34;jx3-lts-versions&amp;#34;
git checkout -b foo
jx gitops upgrade --commit-message &amp;#34;chore: version stream upgrade $VERSION&amp;#34;
git push origin foo
jx create pullrequest -t &amp;#34;chore: version stream upgrade $VERSION&amp;#34;
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>V3: Version Stream Manual Migrations</title>
      <link>https://jenkins-x.io/v3/admin/setup/upgrades/migrations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jenkins-x.io/v3/admin/setup/upgrades/migrations/</guid>
      <description>
        
        
        &lt;h2 id=&#34;version-stream-manual-migrations&#34;&gt;Version Stream Manual Migrations&lt;/h2&gt;
&lt;p&gt;The sections below document manual migration steps required that occur from time to time where an automated upgrade is
not possible or practical&lt;/p&gt;
&lt;h3 id=&#34;v00969&#34;&gt;v0.0.969&lt;/h3&gt;
&lt;p&gt;NB: These steps are only relevant if you are using Hashicorp Vault as secret storage within &lt;code&gt;jx&lt;/code&gt;. Ignore for all other secret stores&lt;/p&gt;
&lt;p&gt;v0.0.969 introduced a change to remove Hashicorp Vault from &lt;code&gt;jx&lt;/code&gt; control and become an explicit cluster dependency
installed either via Terraform (for cloud environments) or Helm (for on-premises). The reasoning behind this is to reduce
cyclic complexity within &lt;code&gt;jx&lt;/code&gt; where the platform requires secrets and the &lt;code&gt;jx&lt;/code&gt; platform is also responsible for provisioning
where to store these secrets.&lt;/p&gt;
&lt;h4 id=&#34;migration-steps&#34;&gt;Migration steps&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;First delete all your external-secrets and secrets within your cluster to temporarily stop External Secrets trying to synchronise
these by running the following&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get es -n jx --no-headers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true | awk &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/./{print $1}&amp;#39;&lt;/span&gt; | tee &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;xargs kubectl delete -n jx es&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &amp;gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;xargs kubectl delete -n jx secret&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;If using Terraform then upgrade your infrastructure using the latest jx terraform module for your provider
From your Terraform repo,&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rm -rf .terraform
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;terraform init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;terraform apply
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Alternatively if not using Terraform, simply install the following charts in the &lt;code&gt;jx-vault&lt;/code&gt; namespace,&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo add jx3 https://jenkins-x-charts.github.io/repo
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm repo update
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm upgrade --install --wait vault-operator oci://ghcr.io/bank-vaults/helm-charts/vault-operator --version 1.22.3 -n jx-vault 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;helm install vault-instance jx3/vault-instance --version 1.0.28 -n jx-vault 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;p&gt;If you wish to migrate secrets from your existing (soon to be decommissioned) Vault then now is the time to do that by
connecting to the new Vault instance in &lt;code&gt;jx-vault&lt;/code&gt; and putting secrets you want to maintain there&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run the &lt;code&gt;jx gitops upgrade&lt;/code&gt; process and commit the files to git and push to trigger the boot job. (Don&amp;rsquo;t worry if
you&amp;rsquo;ve already done this step previously - in which case just re-trigger a boot job with a dummy commit).
This boot job will populate any missing secrets in Vault within the &lt;code&gt;jx secret populate&lt;/code&gt; step&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After the boot job completes confirm the presence of synchronised External Secrets by running&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;kubectl get es -n jx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Once you&amp;rsquo;re happy with your new Vault installation you can tidy up the older vault in &lt;code&gt;secret-infra&lt;/code&gt; by removing
the vault-instance and vault-operator from your helmfile located in &lt;code&gt;helmfiles/secret-infra/helmfile.yaml&lt;/code&gt; and
running a boot job&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
  </channel>
</rss>
